// DO NOT EDIT: generated by fsdgenjs

import { HttpClientUtility, IServiceResult, IHttpClientOptions } from 'facility-core';
import { IFacilityGeneratorApi, IGetApiInfoRequest, IGetApiInfoResponse, IGenerateRequest, IGenerateResponse, INamedText, IGenerator, IFailure } from './facilityGeneratorApiTypes';
export * from './facilityGeneratorApiTypes';

/** Provides access to FacilityGeneratorApi over HTTP via fetch. */
export function createHttpClient({ fetch, baseUri }: IHttpClientOptions): IFacilityGeneratorApi {
	return new FacilityGeneratorApiHttpClient(fetch, baseUri);
}

const { fetchResponse, createResponseError, createRequiredRequestFieldError } = HttpClientUtility;
type IFetch = HttpClientUtility.IFetch;
type IFetchRequest = HttpClientUtility.IFetchRequest;

class FacilityGeneratorApiHttpClient implements IFacilityGeneratorApi {
	constructor(fetch: IFetch, baseUri?: string) {
		if (typeof fetch !== 'function') {
			throw new TypeError('fetch must be a function.');
		}
		if (typeof baseUri === 'undefined') {
			baseUri = '';
		}
		if (/[^\/]$/.test(baseUri)) {
			baseUri += '/';
		}
		this._fetch = fetch;
		this._baseUri = baseUri;
	}

	/** Gets information about the API. */
	public getApiInfo(request: IGetApiInfoRequest, context?: unknown): Promise<IServiceResult<IGetApiInfoResponse>> {
		const uri = '';
		const fetchRequest: IFetchRequest = {
			method: 'GET',
		};
		return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest, context)
			.then(result => {
				const status = result.response.status;
				let value: IGetApiInfoResponse | null = null;
				if (result.json) {
					if (status === 200) {
						value = result.json as IGetApiInfoResponse | null;
					}
				}
				if (!value) {
					return createResponseError(status, result.json) as IServiceResult<IGetApiInfoResponse>;
				}
				return { value: value };
			});
	}

	/** Generates code from a service definition. */
	public generate(request: IGenerateRequest, context?: unknown): Promise<IServiceResult<IGenerateResponse>> {
		const uri = 'generate';
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(request)
		};
		return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest, context)
			.then(result => {
				const status = result.response.status;
				let value: IGenerateResponse | null = null;
				if (result.json) {
					if (status === 200) {
						value = result.json as IGenerateResponse | null;
					}
				}
				if (!value) {
					return createResponseError(status, result.json) as IServiceResult<IGenerateResponse>;
				}
				return { value: value };
			});
	}

	private _fetch: IFetch;
	private _baseUri: string;
}
